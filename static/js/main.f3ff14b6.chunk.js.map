{"version":3,"sources":["components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Cards/Cards.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cn","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toLocaleString","COVID_API_URL","fetchData","country","a","url","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","yandexTranslate","text","key","lang","params","URLSearchParams","append","post","headers","response","fetchCountries","countries","countriesNames","name","join","countriesNamesTranslated","split","countriesTranslated","countryName","i","translate","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","barChart","backgroundColor","options","legend","display","title","CountryPicker","handleCountyChange","setCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","selectedIndex","App","state","county","fetchedData","setState","this","image","src","covidImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f3ff14b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1-MY2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2hbAp\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core'; \r\nimport CountUp from 'react-countup';\r\nimport cn from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards = ({ data: {confirmed, recovered, deaths, lastUpdate}}) => {\r\n    if (!confirmed) {\r\n        return 'Loading...';\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cn(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Зараженных</Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUp start={0} end={confirmed.value} duration={1} separator=' '/>\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toLocaleString()}</Typography>\r\n                        <Typography variant='body2'>Число активных случаев заражения COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cn(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Вылечившихся</Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUp start={0} end={recovered.value} duration={1} separator=' '/>\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toLocaleString()}</Typography>\r\n                        <Typography variant='body2'>Число выздоровевших от COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cn(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Смертей</Typography>\r\n                        <Typography variant='h5'>\r\n                            <CountUp start={0} end={deaths.value} duration={1} separator=' '/>\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toLocaleString()}</Typography>\r\n                        <Typography variant='body2'>Число смертей от COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst COVID_API_URL = 'https://covid19.mathdro.id/api';\r\n\r\nconst YANDEX_TRANSLATE_API_URL = 'https://translate.yandex.net/api/v1.5/tr.json/translate';\r\nconst YANDEX_TRANSLATE_KEY = 'trnsl.1.1.20200504T100920Z.f61c4784ae35633d.23a45cc76ccdeeafcd8dda83f66a130e08494e52';\r\n\r\nexport const fetchData = async (country) => {\r\n    const url = country ? `${COVID_API_URL}/countries/${country}` : COVID_API_URL;\r\n    try {\r\n        const { data: {confirmed, recovered, deaths, lastUpdate} } = await axios.get(url);\r\n        return { confirmed, recovered, deaths, lastUpdate }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${COVID_API_URL}/daily`);\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }))\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n const yandexTranslate = async (text, key, lang = 'en-ru') => {\r\n    const url = `${YANDEX_TRANSLATE_API_URL}?lang=${lang}&key=${key}`;\r\n    const params = new URLSearchParams();\r\n    params.append('text', text);\r\n    const response = await axios.post(url, params, {\r\n        headers: {'Content-Type': 'application/x-www-form-urlencoded'}\r\n    });\r\n    return response.data.text[0];\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const { data: {countries} } = await axios.get(`${COVID_API_URL}/countries`);\r\n        const countriesNames = countries.map((country) => country.name);\r\n        const countriesNamesTranslated = (await yandexTranslate(countriesNames.join(' | '), \r\n                                                YANDEX_TRANSLATE_KEY)).split(' | ');\r\n\r\n        const countriesTranslated = countriesNames.map((countryName, i) => ({\r\n            name: countryName,\r\n            translate: countriesNamesTranslated[i]\r\n        }));\r\n        console.log('countriesTranslated',countriesTranslated)\r\n        return countriesTranslated;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","import React, {useState, useEffect} from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from  'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({data: {confirmed, recovered, deaths}, country}) => {\r\n    const [dailyData, setDailyData] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        };\r\n\r\n        fetchAPI(dailyData);\r\n    }, []);\r\n\r\n    const lineChart = (\r\n        dailyData.length ? (\r\n            <Line\r\n                data = {{\r\n                    labels: dailyData.map(({ date}) => date),\r\n                    datasets: [{\r\n                        data: dailyData.map(({ confirmed }) => confirmed),\r\n                        label: 'Зараженных',\r\n                        borderColor: 'rgba(255, 0, 0, 0.5)',\r\n                        fill: true    \r\n                    }, {\r\n                        data: dailyData.map(({ deaths }) => deaths),\r\n                        label: 'Умерших',\r\n                        borderColor: 'rgba(0, 0, 0, 0.5)',\r\n                        fill: true \r\n                    }],\r\n                }}\r\n            />) : null\r\n    );\r\n\r\n    console.log(confirmed, recovered, deaths);            \r\n    console.log(country);\r\n    console.log(country && country.translate);\r\n    const barChart = (\r\n        confirmed && country ? (\r\n            <Bar\r\n                data={{\r\n                    labels: ['Зараженных', 'Выздоровевших', 'Умерших'],\r\n                    datasets: [{\r\n                        label: 'Человек',\r\n                        backgroundColor: [\r\n                            'rgba(255, 0, 0, 0.8)',\r\n                            'rgba(0, 255, 0, 0.8)',\r\n                            'rgba(0, 0, 0, 0.8)',  \r\n                        ],\r\n                        data: [confirmed.value, recovered.value, deaths.value]\r\n                    }]\r\n                }}\r\n                options = {{\r\n                    legend: { display: false },\r\n                    title: {display: true, text: `Статистика - ${country.translate}`}\r\n                }}\r\n            />) : null\r\n    );\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {(country && country.name) ? barChart : lineChart}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chart;","import React, { useState, useEffect }  from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core'; \r\nimport { fetchCountries } from '../../api'\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst CountryPicker = ({handleCountyChange}) => {\r\n    const [countries, setCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setCountries(await fetchCountries());\r\n        }\r\n\r\n        fetchAPI();\r\n    }, [setCountries]);\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue='' onChange = {(e) => handleCountyChange({\r\n                    name: e.target.value,\r\n                    translate: e.target.options[e.target.selectedIndex].text\r\n                })}>\r\n                <option value=''>Весь мир</option>\r\n                {countries.map((country) => {\r\n                    return <option key={country.name} value={country.name}>{country.translate}</option>\r\n                })}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport default CountryPicker;","import React from 'react';\r\nimport { Cards, Chart, CountryPicker } from './components';\r\nimport styles from './App.module.css';\r\nimport { fetchData } from './api';\r\nimport covidImage from './images/image.png';\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        data: {},\r\n        county: {},\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const fetchedData = await fetchData();\r\n        this.setState({ data: fetchedData });\r\n    }\r\n\r\n    handleCountyChange = async (country) => {\r\n        const fetchedData = await fetchData(country.name);\r\n        this.setState({ data: fetchedData, country });\r\n    }\r\n\r\n    render() {\r\n        const { data, country } = this.state;\r\n        return (\r\n            <div className={styles.container}>\r\n                <img className={styles.image} src={covidImage} alt='logo'/>\r\n                <Cards data={data}/>\r\n                <CountryPicker handleCountyChange={this.handleCountyChange}/>\r\n                <Chart data={data} country={country}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1CfWz\",\"card\":\"Cards_card__TV7iB\",\"infected\":\"Cards_infected__yUID-\",\"recovered\":\"Cards_recovered__2cptH\",\"deaths\":\"Cards_deaths__39Pw0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2SSqD\",\"image\":\"App_image__23kwi\"};"],"sourceRoot":""}